RFE Communicator
================

This is the main class to use when communicating with the RF Explorer.

.. currentmodule:: RFExplorer

.. autosummary::
   :toctree: autogenerated_api

   RFECommunicator

The link above will take you to descriptions of all the methods. The remaining sections have a sub-set of the same methods but are grouped by subjects.

.. contents::

Setting Up The Device
---------------------

Connecting to the Device
~~~~~~~~~~~~~~~~~~~~~~~~

These are the two main methods I'm using right now to connect to the USB port.

.. autosummary::
   :toctree: autogenerated_api

   RFECommunicator.GetConnectedPorts
   RFECommunicator.ConnectPort

.. code::

   self.rf_explorer.GetConnectedPorts()
   if (not self.rf_explorer.ConnectPort(self.serial_port, self.baud_rate)):
       raise CommunicatorException("Unable to connect: port={}, baud={}".format(
           self.serial_port,
           self.baud_rate))
   
Reboot the Device
~~~~~~~~~~~~~~~~~

Once connected you should reboot the device by passing the string "r" to the ``SendCommand`` and then wait till the ``IsResetEvent`` property is False.

.. autosummary::
   :toctree: autogenerated_api

   RFECommunicator.SendCommand
   RFECommunicator.IsResetEvent

.. code::

   self.rf_explorer.SendCommand("r")
   while(self.rf_explorer.IsResetEvent):
       pass

Loading The Model
~~~~~~~~~~~~~~~~~

To start the data-stream you have to request the config data and then wait until the model has been loaded.

.. autosummary::
   :toctree: autogenerated_api
             
   RFECommunicator.SendCommand_RequestConfigData
   RFECommunicator.ActiveModel
   RFECommunicator.ProcessReceivedString
   RFE_Common.eModel

.. code::

   self.rf_explorer.SendCommand_RequestConfigData()
   while(self.rf_explorer.ActiveModel == RFExplorer.RFE_Common.eModel.MODEL_NONE):
       self.rf_explorer.ProcessReceivedString(True)

Checking The Analyzer
~~~~~~~~~~~~~~~~~~~~~

The example checks that the device is a spectrum analyzer (actually checks that it's not a signal generator). This seems like it might be unnecessary, but I guess it's safer to check.

.. autosummary::
   :toctree: autogenerated_api

   RFECommunicator.IsAnalyzer

.. code::

   if (not self.rf_explorer.IsAnalyzer()):     
       raise CommunicatorError("Error: Device connected is a Signal Generator. "
                                "\nPlease, connect a Spectrum Analyzer")

Closing the Connection
----------------------

It looks like the ``RFECommunicator's`` destructor tries to close the Serial Connection, but it's probably safer to explicitly close it to avoid problems.

.. autosummary::
   :toctree: autogenerated_api

   RFECommunicator.Close

.. code::

   if self._rf_explorer is not None:
       self.rf_explorer.Close()
       self._rf_explorer = None

The Spectrum Frequency Values
-----------------------------

These are methods to help you find out what is the range of values being collected. You can change it with some of the other methods and the SweepData only keeps track of indices so you probably need this to keep things in sync.

.. autosummary::
   :toctree: autogenerated_api

   RFECommunicator.CalculateCenterFrequencyMHZ
   RFECommunicator.CalculateEndFrequencyMHZ
   RFECommunicator.CalculateFrequencySpanMHZ

Processing Data
---------------

I (sort of) mentioned this method in the section about setting-up the USB connection, but it's important so I'll call it out. The code is using a thread to write the data to a buffer (or something like one) and won't process it so that you can get to it until you call ``ProcessReceivedString``. If you pass in ``False`` as an argument it will only process one data-set and if you pass in ``True`` it will process all the data it has buffered so far.

.. autosummary::
   :toctree: autogenerated_api

   RFECommunicator.ProcessReceivedString
