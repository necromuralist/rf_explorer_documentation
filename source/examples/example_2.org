#+TITLE: Example Two - Frequency Sub-ranges

This is an example taken from the RFExplorer for python repository. It extends example one by looking at sub-ranges of the spectrum and reporting the maximum value for each sub-range.

It will display amplitude in dBm and frequency in MHz for the maximum amplitude in the frequency range. It uses three main arguments
 - =scan-start=: The frequency to start the scan
 - =scan-end=: The frequency to end the scan
 - =span-size=: The amount of frequencies to include in the current measurement.

It starts at the =scan-start= frequency, then finds the highest value for the frequencies within the span (i.e. =scan-start=, to =scan-start + span-size=). Then moves up past the last frequency it used and finds the highest value for the next span, etc.

The defaults set in the argument parser should have it find the peaks for channels 1, 6, and 11, omitting the 5 frequencies that they aren't supposed to overlap. 

Changing the settings incurs kind of a lot of overhead so it wouldn't be practical to actually do it like this, but this shows you how to select a sub-set of frequencies to query.

* Channel Reference
  These are the frequency ranges for the main channels (2.4 GHz).

|        | Channel 1 | Channel 6 | Channel 11 |
|--------+-----------+-----------+------------|
| Center |      2412 |      2437 |       2462 |
| Span   |        20 |        20 |         20 |
| Start  |      2402 |      2427 |       2452 |
| End    |      2422 |      2447 |       2472 |

* Imports

#+BEGIN_SRC ipython :session example2 :results none :noweb-ref imports
# python standard library
import time

# from pypi
import RFExplorer

# this folder
from example_1 import (
    Communicator,
    argument_parser,
    print_peak,
)
#+END_SRC

* Settings Checker

  This function checks that the settings the user chose are reasonable and then sets them on the rf-explorer.

#+BEGIN_SRC ipython :session example2 :results none :noweb-ref check-settings
def check_settings(rf_explorer, arguments):
    """This functions check user settings

    If a value is out of bounds it sets the value to the limit allowed
    
    Args:
     rfe_explorer: RFECommunicator instance
     arguments: object with the maximum setting values

    Returns:
     tuple: span-size, start-frequency, stop-frequency
    """
    #print user settings
    print("User settings:\n"
          + "Start freq: {} MHz".format(arguments.scan_start)
          + " - "
          + "Stop freq: {} MHz".format(arguments.scan_stop))

    #Control maximum span size

    if(rf_explorer.MaxSpanMHZ <= arguments.span_size):
        print("Max Span size: {} MHz, Given {} MHz (aborting)".format(
            rf_explorer.MaxSpanMHZ,
            arguments.span_size
        ))
        return None, None, None
    if(rf_explorer.MinFreqMHZ > arguments.scan_start):
        print("Min Start freq: {} MHz, Given: {} MHz(aborting)".format(
            rf_explorer.MinFreqMHZ,
            arguments.scan_start))
        return None, None, None
    if(rf_explorer.MaxFreqMHZ < arguments.scan_stop):
        print("Max Start freq: {} MHz, Given: {} MHz (aborting)".format(
            rf_explorer.MaxFreqMHZ,
            arguments.scan_stop))
        return None, None, None

    rf_explorer.SpanMHZ = arguments.span_size
    rf_explorer.StartFrequencyMHZ = arguments.scan_start

    limit = rf_explorer.StartFrequencyMHZ + rf_explorer.SpanMHZ
    if(limit > arguments.scan_stop):
        print(("Max Stop freq (START_SCAN_MHZ "
               "+ SPAN_SIZE_MHZ): {} MHz, Given: {}").format(
                   arguments.scan_stop,
                   limit))
        stop_frequency = None
    else:
        stop_frequency = limit
    
    return rf_explorer.SpanMHZ, rf_explorer.StartFrequencyMHZ, stop_frequency
#+END_SRC

* Main Function
#+BEGIN_SRC ipython :session example2 :results none :noweb-ref main-function
def main(arguments, communicator):
    """Runs the example

    Args:
     arguments (:py:class:`argparse.Namespace`): thing with parameters
     communicator (``Communicator``): holder of the RFECommunicator
    """
    rf_explorer = communicator.rf_explorer
    try:
        communicator.set_up()
        #Control settings
        SpanSize, StartFreq, StopFreq = check_settings(rf_explorer, arguments)
        if(SpanSize and StartFreq and StopFreq):
            #set new frequency range
            print("Updating Device Configuration: {}, {}".format(StartFreq, StopFreq))
            rf_explorer.UpdateDeviceConfig(StartFreq, StopFreq)
            print("updated")
            LastStartFreq = 0
            nInd = 0
            while (StopFreq<=arguments.scan_stop and StartFreq < StopFreq): 
                #Process all received data from device 
                print("Waiting for data")
                while (rf_explorer.SweepData.Count < 1):
                    rf_explorer.ProcessReceivedString(True)
    
                #Print data if received new sweep and a different start frequency 
                if(StartFreq != LastStartFreq):
                    nInd += 1
                    print("Freq range[{}]: {} - {} MHz".format(nInd, StartFreq, StopFreq))
                    print_peak(rf_explorer)
                    LastFreqStart = StartFreq
    
                #set new frequency range
                StartFreq = min((StopFreq + arguments.offset, arguments.scan_stop))
                StopFreq = StartFreq + SpanSize

                #Maximum stop/start frequency control
                if (StartFreq < StopFreq and StopFreq<=arguments.scan_stop):
                    print("Updating device config")
                    rf_explorer.UpdateDeviceConfig(StartFreq, StopFreq)
                    #Wait for new configuration to arrive (as it will clean up old sweep data)
                    sweep_data = None
                    print("Waiting for sweep_data update")
                    while ((sweep_data is None) or sweep_data.StartFrequencyMHZ != StartFreq):
                        if rf_explorer.SweepData.IsFull():
                            print("Sweep Data Collection is Full")
                        rf_explorer.ProcessReceivedString(True)
                        if (rf_explorer.SweepData.Count > 0):
                            sweep_data = rf_explorer.SweepData.GetData(rf_explorer.SweepData.Count-1)

    except Exception as error:
        print("Error: {}".format(error))
    return
#+END_SRC

* Adding Arguments
  This adds the arguments unique to this example. The span-size used is the maximum that the rf-explorer will allow.

#+BEGIN_SRC ipython :session example2 :results none :noweb-ref add-arguments
def add_arguments(parser):
    """adds the extra command-line arguments

    Args:
     parser (:py:class:`argparse.ArgumentParser`)

    Returns:
     :py:class:`argparse.ArgumentParser`: parser with extra arguments
    """
    parser.add_argument(
        "--scan-start", default=2402, type=float,
        help="Frequency (MHz) to start the scan on (default=%(default)s)",
    ),
    parser.add_argument(
        "--scan-stop", default=2477, type=float,
        help="Frequency (MHz) to stop the scan on (default=%(default)s)"
    )
    parser.add_argument(
        "--span-size", default=20, type=float,
        help="Span of each measurement (default=%(default)s)")
    parser.add_argument(
        "--reset-time", default=3, type=float,
        help="Time to wait after sending the reset command (default=%(default)s)")
    parser.add_argument(
        "--offset", default=5, type=int,
        help="Amount to add to the last frequency in the range when finding the low-end for the next range (default=%(default)s)"
    )
    return parser
#+END_SRC

* Running the Code
#+BEGIN_SRC ipython :session example2 :results none :noweb-ref executable-section
if __name__ == "__main__":
    parser = argument_parser()
    parser = add_arguments(parser)
    arguments = parser.parse_args()
    with Communicator(arguments.serialport,
                      arguments.baud_rate,
                      settle_time=arguments.reset_time) as communicator:
        main(arguments, communicator)
#+END_SRC

* The Tangle

#+BEGIN_SRC ipython :session example2 :tangle example_2.py
<<imports>>

<<check-settings>>

<<main-function>>

<<add-arguments>>

<<executable-section>>
#+END_SRC
