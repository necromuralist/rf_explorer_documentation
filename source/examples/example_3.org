#+TITLE: RF-Explorer Example Three

* Description
  This is a variation on example one that dumps the entire spectrum instead of just the peak.

* Tangle

#+BEGIN_SRC ipython :session example3 :tangle example_3.py
<<imports>>

<<main>>
        <<setup-communicator>>
        <<setup-loop>>
            <<process-string>>
            <<print-data>>
    <<end-main>>

<<executable-block>>
#+END_SRC

* Imports
#+BEGIN_SRC ipython :session example3 :results none :noweb-ref imports
# python standard library
from datetime import datetime, timedelta

# from this package
from example_1 import (
    argument_parser,
    Communicator,
    )
#+END_SRC

* The Main processing loop

#+BEGIN_SRC ipython :session example3 :results none :noweb-ref main
def main(arguments, communicator):
    """Runs the example

    Args:
     arguments (argparse.Namespace): object with the settings
     communicator (Communicator): object with the RFECommunicator
    """
    rf_explorer = communicator.rf_explorer
    try:
#+END_SRC

** Setup the Communicator
   This tells the communicator to do the basic setup.

#+BEGIN_SRC ipython :session example3 :results none :noweb-ref setup-communicator
communicator.set_up()
#+END_SRC

** Setup the Loop
   The loop will run continually until we run out of time. This sets up the time variables as well as a =last_index= variable that will make sure that we only print the value if it has been updated.

#+BEGIN_SRC ipython :session example3 :results none :noweb-ref setup-loop
print("Receiving data...")
#Process until we complete scan time
last_index = 0
start = datetime.now()
total = timedelta(seconds=arguments.run_time)
end = start + total

if arguments.csv_data:
    print("index,frequency (MHz), amplitude (dBm)")
while (datetime.now() < end):
#+END_SRC

** Process String
   As before, the thread needs to be prompted to inspect the string it has pulled from the serial port.

#+BEGIN_SRC ipython :session example3 :results none :noweb-ref process-string
#Process all received data from device 
rf_explorer.ProcessReceivedString(True)
#+END_SRC

** Print The Data
   This checks the =RFExplorer.RFECommunicator.SweepData.Count= to see if it is new data and then, if it is, Dumps the data to the screen. This is the only part that differs from example 1.

#+BEGIN_SRC ipython :session example3 :results none :noweb-ref print-data
#Print data if received new sweep only
if (rf_explorer.SweepData.Count > last_index):
    print(rf_explorer.SweepData.Dump())
    last_index = rf_explorer.SweepData.Count          
#+END_SRC

** End Main
   This is a leftover block to catch any exceptions that get raised.

#+BEGIN_SRC ipython :session example3 :results none :noweb-ref end-main    
except Exception as error:
    print("Error: ".format(error))
return
#+END_SRC


* The Executable Block

#+BEGIN_SRC ipython :session example3 :results none :noweb-ref executable-block
if __name__ == "__main__":
    parser = argument_parser()
    arguments = parser.parse_args()

    with Communicator(arguments.serialport, arguments.baud_rate) as communicator:        
        main(arguments, communicator)
#+END_SRC
